* Problem Statement
  The problem, from the README, is as follows.
  #+begin_quote
    For this challenge you will consume the Giant Bomb API to create an application that will allow a
    user to search games and "rent" them. The application should consist of at least two unique pages
    (`search` and `checkout`). Your view should display the game thumbnail and title, and the rest is up
    to you. You can use any language and or framework you'd like.
  #+end_quote

  We've got some getting-started links to the Giant Bomb API, and an invitation to questions.

  I'd like to have questions, but the problem statement is so open ended that it seems like every
  question can be answered with =the rest is up to you=.

  That said, let's ponder what we know. We need at least two pages:
  1. A ~search~ page
  2. A ~checkout~ page

  The existence of a checkout page means we need to be able to store a collection of games the user
  would like to "rent".

  Once they've "rented" the game, it's reasonable to then want a list of games the user has rented,
  with some kind of rental-based data attached.

  Right off the bat I can think of two things I'd like to either avoid doing, or do last,
  specifically because it's more work and might push things outside of the 3-4 hour time box this
  project is meant to take, without being specifically asked for. Also, the goal of the project
  isn't to have a fully functioning "product", but to display my development process.
* Dev process
** High level
   At a high level, I'd like to achieve the following goals:
   - Use re-frame, as that's what's in use at Gravie
   - Spend as little time on boilerplate as possible
   - First achieve the explicitly asked for goals, then add flourish.
** Challenges
   The primary challenge here is that this problem is to build a frontend app, and the majority of
   my experience is with backend, so I need to learn many new things, and learn them quickly.

   Given this, it will be challenging to know, ahead of time, the order in which to build things, so
   I will likely wander down various dead ends or false starts.
** Beginnings
   I'd like to minimize the amount of time I spend writing bo
* TODO Questions
** TODO Can the "pages" be modals?
  Even though the problem seems open ended enough to obviate any questions, I realized that this
  could be a UX choice, and thus a question.
** TODO Should each page be linkable?
   I'm envisioning this as a single page app, given we're using React under the hood. As such,
   there's a question for whether we should be able to link to each modal or page of the SPA, or
   just force users to load up the first page every time.

   My personal preference is to support linking into different "pages", though I don't know exactly
   how right now.
* TODO Things to build
** Search
*** Search UI
*** Item display UI
*** Ability to query the giant bomb api
** Checkout
*** Rented items
*** Checkout cart
** App State
*** An API key
*** The current search
*** The returned search results
* TODO Things intentionally not built, and why
